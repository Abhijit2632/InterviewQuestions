    - Immutable
        - Make the class final so it can not be extended further Hence no child class possible.
        - Bydefault its properties will be final so cant be changed after object creation.
        - Make it private as well so it cant be accessed ditrectly.
        - No setters 
        - Inititialize using parameterized consrtuctor with deep copy of an object reference.
        - deep copy should be done inside the getter so to return cloned copy rather than the original.
        - Ex: Integer, Boolean, Byte, Short, String
    - String methods
        - intern()
        - contains()
        - 
    - StringBuilder vs StringBuffer
        - StringBuilder is non-thread safe. so fast. So more efficent. Hence widely used!
    - String Programs

    - Shallow, Deep, And Lazy Copy In Java
        - clone() method of the object class supports a shallow copy of the object.
        - it creates a new instance and copies all the field of the object to that 
        new instance and returns it as an object type.
        - we need to explicitly cast it back to our original object.
        - If only primitive data type fields or Immutable objects are there, then 
        there is no difference between shallow and deep copy in Java.
    - Deep Copy/Clone
        - for a deep copy, we need to ensure all the member classes also implement 
        the Cloneable interface and override the clone() method of the object class.

    - Ans: Keep in mind that if an object has only primitive fields, then obviously 
    we should go for shallow copy, but if the object has references to other objects, 
    then based on the requirement, shallow copy or deep copy should be done.
    - Lazy Copy
        - approach â€” at the initial state, a shallow copy approach is used. A counter 
        is also used to keep track of how many objects share the data. When the program 
        wants to modify the original object, it checks whether the object is shared or not. 
        If the object is shared, then the deep copy mechanism is initiated.






Ex-----------------------------------------------------------------
// Java Program to Create An Immutable Class

// Importing required classes
import java.util.HashMap;
import java.util.Map;

// Class 1
// An immutable class
final class Student {

	// Member attributes of final class
	private final String name;
	private final int regNo;
	private final Map<String, String> metadata;

	// Constructor of immutable class
	// Parameterized constructor
	public Student(String name, int regNo,
				Map<String, String> metadata)
	{

		// This keyword refers to current instance itself
		this.name = name;
		this.regNo = regNo;

		// Creating Map object with reference to HashMap
		// Declaring object of string type
		Map<String, String> tempMap = new HashMap<>();

		// Iterating using for-each loop
		for (Map.Entry<String, String> entry :
			metadata.entrySet()) {
			tempMap.put(entry.getKey(), entry.getValue());
		}

		this.metadata = tempMap;
	}

	// Method 1
	public String getName() { return name; }

	// Method 2
	public int getRegNo() { return regNo; }

	// Note that there should not be any setters

	// Method 3
	// User -defined type
	// To get meta data
	public Map<String, String> getMetadata()
	{

		// Creating Map with HashMap reference
		Map<String, String> tempMap = new HashMap<>();

		for (Map.Entry<String, String> entry :
			this.metadata.entrySet()) {
			tempMap.put(entry.getKey(), entry.getValue());
		}
		return tempMap;
	}
}

// Class 2
// Main class
class GFG {

	// Main driver method
	public static void main(String[] args)
	{

		// Creating Map object with reference to HashMap
		Map<String, String> map = new HashMap<>();

		// Adding elements to Map object
		// using put() method
		map.put("1", "first");
		map.put("2", "second");

		Student s = new Student("ABC", 101, map);

		// Calling the above methods 1,2,3 of class1
		// inside main() method in class2 and
		// executing the print statement over them
		System.out.println(s.getName());
		System.out.println(s.getRegNo());
		System.out.println(s.getMetadata());

		// Uncommenting below line causes error
		// s.regNo = 102;

		map.put("3", "third");
		// Remains unchanged due to deep copy in constructor
		System.out.println(s.getMetadata());
		s.getMetadata().put("4", "fourth");
		// Remains unchanged due to deep copy in getter
		System.out.println(s.getMetadata());
	}
}
